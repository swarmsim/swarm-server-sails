# Policy Mappings
# (sails.config.policies)
# 
# Policies are simple functions which run **before** your controllers.
# You can apply one or more policies to a given controller, or protect
# its actions individually.
# 
# Any policy file (e.g. `api/policies/authenticated.js`) can be accessed
# below by its filename, minus the extension, (e.g. "authenticated")
# 
# For more information on how policies work, see:
# http://sailsjs.org/#/documentation/concepts/Policies
# 
# For more information on configuring policies, check out:
# http://sailsjs.org/#/documentation/reference/sails.config/sails.config.policies.html


allowIf = (fn) ->
  return (req, res, next) ->
    if fn req
      return next()
    return res.forbidden()

allowIf.isMyUser = allowIf (req) ->
  return req.session.authenticated and "#{req.params.id}" == "#{req.user.id}"

allowIf.isMyCharacter = allowIf (req) ->
  # allow a null user too. create will fail, update/delete won't change it
  return req.session.authenticated && (!req.body.hasOwnProperty('user') || req.body.user == req.user.id)

allowIf.hasBodyWithoutField = (name) ->
  return allowIf (req) ->
    return req.body and not req.body.hasOwnProperty name

isAdmin = (req, res, next) ->
  User.findOne({id:req.user.id}).exec (err, user) ->
    if (err)
      return res.status(500).json({error:true, message:"Database error (isAdmin)"})
    if (!user || user.role != 'admin')
      return res.forbidden()
    return next()

module.exports.policies =
  # Default policy for all controllers and actions (`true` allows public     *
  # access)                                                                  *
  # deny all by default, then whitelist allowed operations
  '*': false
  Auth:
    # generated by sails-generate-auth, allow-all is safe
    '*': [ 'passport' ]

  Misc:
    about: true
    healthy: true
    admin: [ 'passport', 'sessionAuth', isAdmin ]
    '*': false

  Policies:
    create: true
    '*': false

  User:
    findOne: true
    populate: [ allowIf (req) ->
      # anonymous can view a user's characters
      return req.options.alias == 'characters' ||
        # do not allow listing others' passports! can list your own though.
        (req.session.authenticated && req.options.alias == 'passports' && req.params.user == req.user.id)
        # deny any other associations by default until we whitelist them
    ]
    # we could allow add/remove character operations here, but it's so much easier to use /character
    whoami: [ 'passport' ]
    update: [ 'passport', allowIf.isMyUser, allowIf.hasBodyWithoutField('role') ]
    '*': false

  Character:
    findOne: true
    create: [ 'passport', allowIf.isMyCharacter ]
    # we don't know the owner without hitting the db, and we want to optimize the
    # common/successful case and not query until after attempting to update, so
    # update validation's done in the controller.
    update: [ 'passport', 'sessionAuth', allowIf.hasBodyWithoutField('league'), allowIf.hasBodyWithoutField('user') ]
    '*': false

  Command:
    # user->character link is validated in the operation itself, just like character.update
    create: [ 'passport', 'sessionAuth' ]
    '*': false

if process.env.DISABLE_DB_OPERATIONS
  # Disable all database access in production until the db is ready. #584.
  # http://stackoverflow.com/questions/26921889/disabling-default-sails-js-routes
  mep = module.exports.policies
  mep.User = mep.Character = mep.Auth = '*': false
