# Policy Mappings
# (sails.config.policies)
# 
# Policies are simple functions which run **before** your controllers.
# You can apply one or more policies to a given controller, or protect
# its actions individually.
# 
# Any policy file (e.g. `api/policies/authenticated.js`) can be accessed
# below by its filename, minus the extension, (e.g. "authenticated")
# 
# For more information on how policies work, see:
# http://sailsjs.org/#/documentation/concepts/Policies
# 
# For more information on configuring policies, check out:
# http://sailsjs.org/#/documentation/reference/sails.config/sails.config.policies.html


allowIf = (fn) ->
  return (req, res, next) ->
    if fn req
      return next()
    return res.forbidden()

allowIf.isMyUser = (getter=(req) -> req.params.id) ->
  return (req, res, next) ->
    userid = getter req
    if not userid
      return res.status(400).json {error:true, message:"No user"}
    if userid and "#{userid}" == "#{req.user.id}"
      return next()
    return res.status(403).json {error:true, message:"That's not your user"}

refreshSessionCharacters = (req, next) ->
  Character.find user:req.user.id
  .exec (err, chars) ->
    if err
      return res.status(500).json({error:true, message:"Database error (refreshSessionCharacters)"})
    req.session.characterIds = {}
    for char in chars
      req.session.characterIds[char.id] = true
    console.log 'refreshchars', req.user.id, req.session.characterIds
    next()

allowIf.isMyCharacter = (getter=(req) -> req.params.id) ->
  return (req, res, next) ->
    charid = getter req
    if not charid
      return res.status(400).json {error:true, message:"No character"}
    if req.session.characterIds?[charid]
      return next()
    # on fail, try clearing the session characterid cache. failing isn't common, so this shouldn't lag much.
    refreshSessionCharacters req, ->
      if req.session.characterIds[charid]
        return next()
      return res.status(403).json {error:true, message:"That's not your character"}

allowIf.hasBodyWithoutField = (name) ->
  return (req, res, next) ->
    if req.body and not req.body.hasOwnProperty name
      return next()
    return res.status(400).json {error:true, message:"Must be blank: #{name}"}

isAdmin = (req, res, next) ->
  User.findOne({id:req.user.id}).exec (err, user) ->
    if (err)
      return res.status(500).json({error:true, message:"Database error (isAdmin)"})
    if (!user || user.role != 'admin')
      return res.status(403).json {error:true}
    return next()

module.exports.policies =
  # Default policy for all controllers and actions (`true` allows public     *
  # access)                                                                  *
  # deny all by default, then whitelist allowed operations
  '*': false
  Auth:
    # generated by sails-generate-auth, allow-all is safe
    '*': [ 'passport' ]

  Misc:
    about: true
    healthy: true
    admin: [ 'passport', 'sessionAuth', isAdmin ]
    '*': false

  Policies:
    create: true
    '*': false

  User:
    findOne: true
    populate: [ allowIf (req) ->
      # anonymous can view a user's characters
      return req.options.alias == 'characters' ||
        # do not allow listing others' passports! can list your own though.
        (req.session.authenticated && req.options.alias == 'passports' && req.params.user == req.user.id)
        # deny any other associations by default until we whitelist them
    ]
    # we could allow add/remove character operations here, but it's so much easier to use /character
    whoami: [ 'passport' ]
    update: [ 'passport', 'sessionAuth', allowIf.isMyUser(), allowIf.hasBodyWithoutField('role') ]
    '*': false

  Character:
    findOne: true
    create: [ 'passport', 'sessionAuth', allowIf.isMyUser((req) -> req.body?.user) ]
    update: [ 'passport', 'sessionAuth', allowIf.hasBodyWithoutField('league'), allowIf.hasBodyWithoutField('user'), allowIf.isMyCharacter() ]
    '*': false

  Command:
    create: [ 'passport', 'sessionAuth', allowIf.isMyCharacter((req) -> req.body?.character) ]
    '*': false

if process.env.DISABLE_DB_OPERATIONS
  # Disable all database access in production until the db is ready. #584.
  # http://stackoverflow.com/questions/26921889/disabling-default-sails-js-routes
  mep = module.exports.policies
  mep.User = mep.Character = mep.Auth = '*': false
