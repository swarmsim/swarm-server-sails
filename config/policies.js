/**
 * Policy Mappings
 * (sails.config.policies)
 *
 * Policies are simple functions which run **before** your controllers.
 * You can apply one or more policies to a given controller, or protect
 * its actions individually.
 *
 * Any policy file (e.g. `api/policies/authenticated.js`) can be accessed
 * below by its filename, minus the extension, (e.g. "authenticated")
 *
 * For more information on how policies work, see:
 * http://sailsjs.org/#/documentation/concepts/Policies
 *
 * For more information on configuring policies, check out:
 * http://sailsjs.org/#/documentation/reference/sails.config/sails.config.policies.html
 */

function allowIf(fn) {
  return function (req, res, next) {
    if (fn(req)) {
      return next();
    }
    return res.forbidden();
  };
}
allowIf.isMyUser = allowIf(function(req) {
  return req.session.authenticated && req.params.id == req.user.id;
});
allowIf.isMyCharacter = allowIf(function(req) {
  // allow a null user too. create will fail, update/delete won't change it
  return req.session.authenticated && (!req.body.hasOwnProperty('user') || req.body.user == req.user.id);
});

module.exports.policies = {

  /***************************************************************************
  *                                                                          *
  * Default policy for all controllers and actions (`true` allows public     *
  * access)                                                                  *
  *                                                                          *
  ***************************************************************************/

  // deny all by default, then whitelist allowed operations
  '*': false,
  Auth: {
    // generated by sails-generate-auth, allow-all is safe
    '*': [ 'passport' ],
  },
  Misc: {
    about: true,
    healthy: true,
    '*': false
  },
  User: {
    findOne: true,
    populate: [ allowIf(function(req) {
      // anonymous can view a user's characters
      return req.options.alias == 'characters' ||
        // do not allow listing others' passports! can list your own though.
        (req.session.authenticated && req.options.alias == 'passports' && req.params.user == req.user.id)
        // deny any other associations by default until we whitelist them
    })],
    // we could allow add/remove character operations here, but it's so much easier to use /character
    whoami: [ 'passport' ],
    update: [ 'passport', allowIf.isMyUser ],
    '*': false
  },
  Character: {
    findOne: true,
    create: [ 'passport', allowIf.isMyCharacter ],
    // we don't know the owner without hitting the db, and we want to optimize the
    // common/successful case and not query until after attempting to update, so
    // update validation's done in the controller.
    update: [ 'passport', 'sessionAuth' ],
    '*': false
  },

  /***************************************************************************
  *                                                                          *
  * Here's an example of mapping some policies to run before a controller    *
  * and its actions                                                          *
  *                                                                          *
  ***************************************************************************/
	// RabbitController: {

		// Apply the `false` policy as the default for all of RabbitController's actions
		// (`false` prevents all access, which ensures that nothing bad happens to our rabbits)
		// '*': false,

		// For the action `nurture`, apply the 'isRabbitMother' policy
		// (this overrides `false` above)
		// nurture	: 'isRabbitMother',

		// Apply the `isNiceToAnimals` AND `hasRabbitFood` policies
		// before letting any users feed our rabbits
		// feed : ['isNiceToAnimals', 'hasRabbitFood']
	// }
};
